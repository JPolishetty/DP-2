class Solution {
    public int change(int amount, int[] coins) {
        if(coins == null || coins.length == 0){
            return 0;
        }
        //if amount is 0, not picking any coins will be a way to get 0
        if(amount == 0) return 1;
        int dp[][] = new int[coins.length+1][amount+1];
        //for amount 0(j==0), one way to get that so dp[i][0] = 1
        for(int i=0;i<dp.length;i++){
            dp[i][0] = 1;
        }
        for(int i=1;i<dp.length;i++){
            for(int j=1; j<dp[0].length; j++){
                //if amount is less than current coin, we dont consider it so same as no of way with previous coins
                if(j< coins[i-1]){
                    dp[i][j] = dp[i-1][j];
                }
                //else previous ways + no of ways for that coin to get (amount - that coin)
                else{
                    dp[i][j] = dp[i-1][j] + dp[i][j - coins[i-1]];
                }
            }
        }
        return dp[coins.length][amount];
    }
}
